package assign11;

import javax.swing.JFrame;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.event.ChangeEvent;
import javax.swing.filechooser.FileNameExtensionFilter;

import assign11.SongFiles;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;

/**
 * The SoundSketcherFrame class represents the main graphical user interface 
 * for the Sound Sketcher application. It extends JFrame and provides tools for 
 * managing sound tracks and playback settings.
 */
public class SoundSketcherFrame extends JFrame implements ActionListener, ChangeListener {
	
	private final int maxTracks = 16;
	private boolean addingTrack;
	private SongPanel songPanel;
	private BetterDynamicArray<TrackPanel> trackPanels;
	private JTabbedPane tracksPane;
	private JToggleButton playButton, loopButton;
	private JSlider tempoSlider;
	private JLabel tempoLabel;
	private JMenuItem loadMenuItem;
    private JMenuItem saveMenuItem;
	private int panelWidth, panelHeight;
	private SimpleSynthesizer simpleSynth;
	
	/**
     * Creates a control panel with playback controls, loop toggles, and a tempo slider.
     * 
     * @return a JPanel containing the control elements
     */
	private JPanel createControlPanel() {
		JPanel controlPanel = new JPanel();
		controlPanel.setLayout(new FlowLayout());
		
	    playButton = new JToggleButton("Play");
		playButton.addActionListener(this);
		controlPanel.add(playButton);
		
		loopButton = new JToggleButton("Loop");
		loopButton.addActionListener(this);
		controlPanel.add(loopButton);
		
		tempoSlider = new JSlider(40, 200, 120);
		tempoSlider.setMajorTickSpacing(40);
		tempoSlider.setMinorTickSpacing(10);
		tempoSlider.setPaintTicks(true);
		tempoSlider.setPaintLabels(true);
		tempoSlider.addChangeListener(this);
		
		tempoLabel = new JLabel("Tempo (BPM):");
		controlPanel.add(tempoLabel);
		controlPanel.add(tempoSlider);
		
		return controlPanel;
	}
	
	/**
     * Constructs a new SoundSketcherFrame with specified dimensions.
     *
     * @param width  the width of the frame
     * @param height the height of the frame
     */
	public SoundSketcherFrame( int width, int height) { 
		super("Sound Sketcher");
		this.panelWidth = width;
		this.panelHeight = height;
		
		this.simpleSynth = new SimpleSynthesizer();
		
		trackPanels = new BetterDynamicArray<>();
		songPanel = new SongPanel(panelWidth, panelHeight);
		songPanel.setTempo(120);
		
		TrackPanel initialTrack = new TrackPanel(panelWidth, panelHeight, 0, simpleSynth);
		trackPanels.add(initialTrack);
		songPanel.setTrackList(trackPanels);
		
		JPanel controlPanel = createControlPanel();
		
		tracksPane = new JTabbedPane();
		tracksPane.addTab("Song", songPanel);
		tracksPane.addTab("Track 0", initialTrack);
		tracksPane.addTab("Add Track", new JPanel());
		tracksPane.setSelectedIndex(1);
		tracksPane.addChangeListener(this);
		
		addingTrack = false;
		
		JPanel mainPanel = new JPanel(new BorderLayout());
		mainPanel.add(controlPanel, BorderLayout.NORTH);
		mainPanel.add(tracksPane, BorderLayout.CENTER);
		
	    JMenuBar menuBar = new JMenuBar();
	    JMenu fileMenu = new JMenu("File");

        loadMenuItem = new JMenuItem("Load");
        loadMenuItem.addActionListener(this); 
        fileMenu.add(loadMenuItem); 

        saveMenuItem = new JMenuItem("Save");
        saveMenuItem.addActionListener(this); 
        fileMenu.add(saveMenuItem); 

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);
		
		setContentPane(mainPanel);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(panelWidth, panelHeight + 100);
		
		this.setPreferredSize(new Dimension(800,800));
		this.setTitle("Sound Sketcher");
		pack();
	}
	
	/**
	 * Adds a new track panel to the next tab if possible.
	 * This is only possible if the number of tracks is less than the maximum.
	 * If it is not possible, this has no effect.
	 */
	public void addTrack() {
	    addingTrack = true;
	    if(trackPanels.size() < maxTracks) {
	        TrackPanel newTrack = new TrackPanel(panelWidth, panelHeight, trackPanels.size(), new SimpleSynthesizer());
	        newTrack.setTempo(tempoSlider.getValue());
	        newTrack.setLoop(loopButton.isSelected());
	        trackPanels.add(newTrack);
	        tracksPane.insertTab("Track " + (trackPanels.size() - 1), null, 
	                            trackPanels.get(trackPanels.size() - 1), null,
	                            tracksPane.getTabCount() - 1);
	    }
	    tracksPane.setSelectedIndex(tracksPane.getTabCount() - 2);
	    addingTrack = false;
	}
	
	
	/**
     * Handles actions triggered by user interaction with the play and loop controls.
     *
     * @param e the ActionEvent generated by a control element
     */
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == playButton) {
			if(playButton.isSelected()) {
				playButton.setText("Stop");
				for(int i =0; i < trackPanels.size(); i++) {
					trackPanels.get(i).play();
				}
			} else {
				playButton.setText("Play");
				for (int i =0; i <trackPanels.size(); i++) {
					trackPanels.get(i).stop();
				}
			}
		} else if (e.getSource() == loopButton) {
			boolean loop = loopButton.isSelected();
			for (int i = 0; i < trackPanels.size(); i++) {
				trackPanels.get(i).setLoop(loop);
			}
		} else if (e.getSource() == saveMenuItem) {
	        JFileChooser fileChooser = new JFileChooser();
	        fileChooser.setFileFilter(new FileNameExtensionFilter("SongFiles", "song"));
	        fileChooser.setDialogTitle("Select save location");
	        if (fileChooser.showSaveDialog(null) != JFileChooser.APPROVE_OPTION) {
	        	JOptionPane.showMessageDialog(null,  "Save cancelled");
	        	return;
	        }
	        
	        SongFiles.writeFile(fileChooser.getSelectedFile(), tempoSlider.getValue(), trackPanels, songPanel);
	    } else if (e.getSource() == loadMenuItem) {
	        JFileChooser fileChooser = new JFileChooser();
	        fileChooser.showOpenDialog(null);
	        fileChooser.setFileFilter(new FileNameExtensionFilter("Song files", "song"));
	        fileChooser.setDialogTitle("Select file to load");
	        
	        setTempoSlider(SongFiles.readFile(fileChooser.getSelectedFile(), simpleSynth, trackPanels, songPanel, getWidth(), getHeight()));
	        
	        updateTabs();
	        repaint();
	    }
	}
	
	/**
	 * Updates the tabbed pane after loading a file.
	 */
	private void updateTabs() {
	    addingTrack = true;
	    // remove all old tracks
	    while(tracksPane.getTabCount() > 2)
	        tracksPane.remove(1);
	    // add all new tracks
	    int trackNumber = 0;
	    while(trackNumber < trackPanels.size()) {
	        tracksPane.insertTab("Track " + trackNumber, null, 
	                trackPanels.get(trackNumber), null,
	                trackNumber + 1);
	        trackNumber++;
	    }
	    tracksPane.setSelectedIndex(1);
	    addingTrack = false;
	}
	
	/**
     * Adjusts the tempo slider value to fit within its minimum and maximum bounds.
     *
     * @param newTempo the new tempo value to set
     */
	private void setTempoSlider(int newTempo) {
	    if(newTempo < tempoSlider.getMinimum())
	        tempoSlider.setMinimum(newTempo);
	    if(newTempo > tempoSlider.getMaximum())
	        tempoSlider.setMaximum(newTempo);
	    tempoSlider.setValue(newTempo);
	}
	
	/**
     * Responds to state changes in the tempo slider and the tabbed pane.
     * Adjusts the tempo of all tracks when the slider changes or adds a new track 
     * when the "Add Track" tab is selected.
     *
     * @param e the ChangeEvent triggered by a user action
     */
	@Override
	public void stateChanged(ChangeEvent e) {
		if (e.getSource() == tempoSlider) {
			int tempo = tempoSlider.getValue();
			songPanel.setTempo(tempo);
			for ( int i = 0; i < trackPanels.size(); i++) {
				trackPanels.get(i).setTempo(tempo);
			}
		} else if (e.getSource() == tracksPane && tracksPane.getSelectedIndex() == tracksPane.getTabCount() -1 && !addingTrack) {
			addTrack();
		}
	}
}
